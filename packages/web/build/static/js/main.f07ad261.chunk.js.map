{"version":3,"sources":["../../../src/yupSchemas/index.ts","serviceWorker.ts","../../../../src/graphql/auth/mutations.ts","../../../../src/graphql/auth/queries.ts","../../../../src/modules/auth/LoginWrapper.tsx","../../../../src/modules/auth/RegisterWrapper.tsx","../../../../src/modules/auth/ChangePasswordWrapper.tsx","../../../../src/modules/auth/ForgotPasswordWrapper.tsx","modules/user/auth/shared/TexFieldFormik.tsx","modules/user/auth/signup/SignupMessage.tsx","modules/user/auth/Signup.tsx","utils/apollo/user.ts","modules/user/auth/Singin.tsx","modules/user/auth/ForgotPassword.tsx","modules/user/auth/ChangePassword.tsx","modules/user/auth/confirmUser/ConfirmedUserMessage.tsx","modules/user/auth/ConfirmUser.tsx","modules/user/Auth.tsx","modules/user/account/shared/LogoutButton.tsx","modules/user/account/UserInfo.tsx","modules/user/account/shared/Card.tsx","utils/apollo/queries.ts","modules/shared/ProtectedRoute.tsx","modules/user/Account.tsx","modules/Router.tsx","utils/apollo/cache.ts","utils/apollo/index.ts","index.tsx","../../src/index.ts"],"names":["string","min","exports","emailNotLongEnough","max","email","invalidEmail","required","Boolean","window","location","hostname","match","FormikField","props","name","fieldprops","TextField","field","error","meta","value","helperText","SignupMessage","Fragment","Typography","to","useStyles","makeStyles","theme","avatar","margin","spacing","backgroundColor","palette","secondary","main","form","width","marginTop","submit","Signup","classes","useState","registerSuccess","registerResult","setRegisterResult","Avatar","className","component","variant","callback","Grid","container","item","xs","sm","autoComplete","fullWidth","id","label","autoFocus","type","Button","color","justify","userVar","makeVar","isAuth","Singin","result","setIsAuth","errors","touched","mutationError","message","CustomSelect","FormControlLabel","control","Checkbox","onChange","e","checked","ForgotPassword","withRouter","React","changeResult","setChangeResult","data","setTimeout","Backdrop","open","loading","CircularProgress","Snackbar","autoHideDuration","Alert","severity","token","params","mutationResult","submitData","ConfirmedUserMessage","useMutation","CONFIRM","confirmUser","called","variables","root","height","image","backgroundImage","backgroundRepeat","grey","backgroundSize","backgroundPosition","paper","display","flexDirection","alignItems","Auth","CssBaseline","md","Paper","elevation","square","path","LogoutButton","LOGOUT","logout","children","logoutState","button","UserInfo","useQuery","USERDATA","user","me","disabled","size","style","firstName","lastName","onClick","position","left","top","transform","padding","Card","USER","gql","ProtectedRoute","Account","matches","useMediaQuery","Router","cache","InMemoryCache","typePolicies","Query","fields","read","apolloClient","ApolloClient","uri","ReactDOM","render","StrictMode","ApolloProvider","client","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.f07ad261.chunk.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validRegisterSchema = exports.validLoginSchema = exports.validUserSchema = exports.registerEmailValidation = exports.registerPasswordValidation = exports.invalidEmail = exports.passwordNotLongEnough = exports.emailNotLongEnough = void 0;\nconst yup = require(\"yup\");\nexports.emailNotLongEnough = \"email must be at least 3 characters\";\nexports.passwordNotLongEnough = \"password must be at least 3 characters\";\nexports.invalidEmail = \"email must be a valid email\";\nexports.registerPasswordValidation = yup\n    .string()\n    .min(3, exports.passwordNotLongEnough)\n    .max(255)\n    .required();\nexports.registerEmailValidation = yup\n    .string()\n    .min(3, exports.emailNotLongEnough)\n    .max(255)\n    .email(exports.invalidEmail)\n    .required();\nexports.validUserSchema = yup.object().shape({\n    email: exports.registerEmailValidation,\n    rememberme: yup.boolean()\n        .required(),\n    password: exports.registerPasswordValidation\n});\nexports.validLoginSchema = yup.object().shape({\n    email: exports.registerEmailValidation,\n    rememberme: yup.boolean()\n        .required(),\n    password: exports.registerPasswordValidation\n});\nexports.validRegisterSchema = yup.object().shape({\n    email: exports.registerEmailValidation,\n    firstName: yup.string().min(2).max(255).required(),\n    lastName: yup.string().min(2).max(255).required(),\n    password: exports.registerPasswordValidation\n});\n//# sourceMappingURL=index.js.map","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n    return cooked;\n};\nimport { gql } from \"@apollo/client\";\nexport var REGISTER = gql(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"\\nmutation Register($data: RegisterInput!) {\\n  register(\\n    data: $data\\n  ) {\\n    id\\n  }\\n}\\n\"], [\"\\nmutation Register($data: RegisterInput!) {\\n  register(\\n    data: $data\\n  ) {\\n    id\\n  }\\n}\\n\"])));\nexport var LOGIN = gql(templateObject_2 || (templateObject_2 = __makeTemplateObject([\"\\nmutation Login($email: String!, $password: String!){\\n    login(\\n      email: $email\\n      password: $password\\n    ){\\n      id\\n      lastName\\n      firstName\\n      email        \\n    }\\n  }\\n\"], [\"\\nmutation Login($email: String!, $password: String!){\\n    login(\\n      email: $email\\n      password: $password\\n    ){\\n      id\\n      lastName\\n      firstName\\n      email        \\n    }\\n  }\\n\"])));\nexport var CONFIRM = gql(templateObject_3 || (templateObject_3 = __makeTemplateObject([\"\\nmutation confirmUser($token: String!){\\n  confirmUser(\\n    token: $token\\n  )\\n}\"], [\"\\nmutation confirmUser($token: String!){\\n  confirmUser(\\n    token: $token\\n  )\\n}\"])));\nexport var LOGOUT = gql(templateObject_4 || (templateObject_4 = __makeTemplateObject([\"\\nmutation logout{\\n  logout\\n}\"], [\"\\nmutation logout{\\n  logout\\n}\"])));\nexport var FORGOTPASS = gql(templateObject_5 || (templateObject_5 = __makeTemplateObject([\"\\nmutation forgotPassword($email: String!){\\n  forgotPassword(email: $email)\\n}\\n\"], [\"\\nmutation forgotPassword($email: String!){\\n  forgotPassword(email: $email)\\n}\\n\"])));\nexport var CHANGEPASS = gql(templateObject_6 || (templateObject_6 = __makeTemplateObject([\"\\nmutation changePassword($data: ChangePasswordInput!){\\n  changePassword(data: $data){\\n    email\\n  }\\n}\"], [\"\\nmutation changePassword($data: ChangePasswordInput!){\\n  changePassword(data: $data){\\n    email\\n  }\\n}\"])));\nvar templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6;\n//# sourceMappingURL=mutations.js.map","var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n    return cooked;\n};\nimport { gql } from \"@apollo/client\";\nexport var USERDATA = gql(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"\\nquery me{\\n    me{\\n      id\\n      lastName\\n      firstName\\n      name\\n      email    \\n    }\\n  }\\n\"], [\"\\nquery me{\\n    me{\\n      id\\n      lastName\\n      firstName\\n      name\\n      email    \\n    }\\n  }\\n\"])));\nvar templateObject_1;\n//# sourceMappingURL=queries.js.map","import React from 'react';\nimport { Formik } from \"formik\";\nimport { validLoginSchema } from \"@init/common\";\nimport { useMutation } from '@apollo/client';\nimport { LOGIN } from '../../graphql/auth';\nexport var LoginWrapper = function (props) {\n    var _a, _b;\n    var _c = useMutation(LOGIN), login = _c[0], data = _c[1];\n    if ((_a = data.data) === null || _a === void 0 ? void 0 : _a.login.id) {\n        props.callback(true);\n    }\n    else if (data.data === null || ((_b = data.data) === null || _b === void 0 ? void 0 : _b.login) === null) {\n        props.callback(false);\n    }\n    return (React.createElement(Formik, { initialValues: {\n            email: '',\n            password: '',\n            rememberme: false\n        }, validationSchema: validLoginSchema, onSubmit: function (values) {\n            // same shape as initial values\n            login({ variables: { email: values.email, password: values.password } })\n                .catch(function (err) { return \"\"; });\n        } }, function (_a) {\n        var errors = _a.errors, touched = _a.touched, handleChange = _a.handleChange, handleBlur = _a.handleBlur, handleSubmit = _a.handleSubmit, values = _a.values, isValid = _a.isValid;\n        return (props.children({\n            errors: errors,\n            touched: touched,\n            mutationError: data.error,\n            loading: data.loading,\n            handleChange: handleChange,\n            handleBlur: handleBlur,\n            handleSubmit: handleSubmit,\n            values: values,\n            isValid: isValid\n        }));\n    }));\n};\n//# sourceMappingURL=LoginWrapper.js.map","import React, { useMemo } from 'react';\nimport { Formik } from \"formik\";\nimport { validRegisterSchema } from \"@init/common\";\nimport { useMutation } from '@apollo/client';\nimport { REGISTER } from '../../graphql/auth';\nexport var RegisterWrapper = function (props) {\n    var _a;\n    var initialValues = useMemo(function () {\n        return {\n            email: \"\",\n            firstName: \"\",\n            lastName: \"\",\n            password: \"\"\n        };\n    }, []);\n    var _b = useMutation(REGISTER), register = _b[0], data = _b[1];\n    if ((_a = data.data) === null || _a === void 0 ? void 0 : _a.register.id) {\n        console.log(\"calling back!\");\n        props.callback();\n    }\n    return (React.createElement(Formik, { validateOnBlur: true, initialValues: initialValues, validationSchema: validRegisterSchema, onSubmit: function (values) {\n            register({\n                variables: {\n                    data: values\n                }\n            });\n        } }, function (_a) {\n        var errors = _a.errors, touched = _a.touched, handleChange = _a.handleChange, handleBlur = _a.handleBlur, handleSubmit = _a.handleSubmit, values = _a.values, isValid = _a.isValid;\n        return (props.children({\n            errors: errors,\n            touched: touched,\n            handleChange: handleChange,\n            handleBlur: handleBlur,\n            handleSubmit: handleSubmit,\n            values: values,\n            isValid: isValid,\n            loading: data.loading\n        }));\n    }));\n};\n//# sourceMappingURL=RegisterWrapper.js.map","import React, { useEffect } from 'react';\nimport { Formik } from \"formik\";\nimport { registerPasswordValidation } from \"@init/common\";\nimport { useMutation } from '@apollo/client';\nimport { CHANGEPASS } from '../../graphql/auth';\nexport var ChangePasswordWrapper = function (props) {\n    var _a = useMutation(CHANGEPASS), changePassword = _a[0], data = _a[1];\n    useEffect(function () {\n        props.mutationResult(data);\n    }, [data]);\n    return (React.createElement(Formik, { initialValues: {\n            // same shape as initial values\n            password: ''\n        }, validationSchema: registerPasswordValidation, onSubmit: function (values) {\n            changePassword({ variables: { password: values.password, token: props.token } });\n        } }, function (_a) {\n        var errors = _a.errors, touched = _a.touched;\n        return (props.children({ errors: errors, touched: touched }));\n    }));\n};\n//# sourceMappingURL=ChangePasswordWrapper.js.map","import React from 'react';\nimport { Formik } from \"formik\";\nimport { registerEmailValidation } from \"@init/common\";\nimport { useMutation } from '@apollo/client';\nimport { FORGOTPASS } from '../../graphql/auth';\nexport var ForgotPasswordWrapper = function (props) {\n    var _a = useMutation(FORGOTPASS), forgotPassword = _a[0], data = _a[1];\n    if (data.data.forgotPassword && props.callback) {\n        props.callback(true);\n    }\n    return (React.createElement(Formik, { initialValues: {\n            email: ''\n        }, validationSchema: registerEmailValidation, onSubmit: function (values) {\n            // same shape as initial values\n            forgotPassword({ variables: { email: values.email } });\n        } }, function (_a) {\n        var errors = _a.errors, touched = _a.touched, handleChange = _a.handleChange, handleBlur = _a.handleBlur, handleSubmit = _a.handleSubmit, values = _a.values, isValid = _a.isValid;\n        return (props.children({\n            errors: errors,\n            touched: touched,\n            handleChange: handleChange,\n            handleBlur: handleBlur,\n            handleSubmit: handleSubmit,\n            values: values,\n            isValid: isValid,\n            loading: data.loading,\n            result: data.data\n        }));\n    }));\n};\n//# sourceMappingURL=ForgotPasswordWrapper.js.map","import React from \"react\"\nimport { TextField, TextFieldProps } from \"@material-ui/core\";\nimport { Field, FieldProps } from \"formik\";\n\nexport const FormikField = (props: TextFieldProps) => (\n    <Field name={props.name}>\n        {(fieldprops: FieldProps) => (\n            <TextField\n                {...props}\n                {...fieldprops.field}\n                error={fieldprops.meta.value ? (fieldprops.meta.error ? true : false) : false}\n                helperText={fieldprops.meta.value ? (fieldprops.meta.error) : null}\n            />\n        )}\n    </Field>\n)\n","import React from 'react'\nimport { Typography } from '@material-ui/core'\nimport { Link } from 'react-router-dom'\n\nconst SignupMessage = () => {\n    return (\n        <React.Fragment>\n            <Typography>Confirmation email sent. Please check your inbox and open the link to confirm your account. </Typography>\n            <Link to=\"/signin\">Login</Link>\n        </React.Fragment>\n    )\n}\n\nexport default SignupMessage\n","import React, { useState } from 'react'\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport { Link } from 'react-router-dom';\nimport Grid from '@material-ui/core/Grid';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\nimport { RegisterWrapper } from \"@init/controller\"\nimport { Form } from 'formik';\nimport { FormikField } from \"./shared/TexFieldFormik\"\nimport SignupMessage from './signup/SignupMessage';\n\nconst useStyles = makeStyles((theme) => ({\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n}));\n\nconst Signup = () => {\n    const classes = useStyles();\n\n    const [registerResult, setRegisterResult] = useState({\n        registerSuccess: false\n    });\n\n    if (registerResult.registerSuccess) {\n        return <SignupMessage />\n    }\n\n    return (\n        <React.Fragment>\n            <Avatar className={classes.avatar}>\n                <LockOutlinedIcon />\n            </Avatar>\n            <Typography component=\"h1\" variant=\"h5\">\n                Sign up\n            </Typography>\n            <RegisterWrapper callback={() => setRegisterResult({ registerSuccess: true })}>\n                {() => (\n                    <Form className={classes.form}>\n                        <Grid container spacing={2}>\n                            <Grid item xs={12} sm={6}>\n                                <FormikField\n                                    autoComplete=\"firstname\"\n                                    name=\"firstName\"\n                                    variant=\"outlined\"\n                                    required\n                                    fullWidth\n                                    id=\"firstName\"\n                                    label=\"First Name\"\n                                    autoFocus\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <FormikField\n                                    variant=\"outlined\"\n                                    required\n                                    fullWidth\n                                    id=\"lastName\"\n                                    label=\"Last Name\"\n                                    name=\"lastName\"\n                                    autoComplete=\"lastname\"\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <FormikField variant=\"outlined\"\n                                    required\n                                    fullWidth\n                                    id=\"email\"\n                                    label=\"Email Address\"\n                                    name=\"email\"\n                                    autoComplete=\"email\"\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <FormikField\n                                    variant=\"outlined\"\n                                    required\n                                    fullWidth\n                                    name=\"password\"\n                                    label=\"Password\"\n                                    type=\"password\"\n                                    id=\"password\"\n                                    autoComplete=\"current-password\"\n                                />\n                            </Grid>\n                        </Grid>\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            component=\"button\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.submit}\n                        >\n                            Sign Up\n          </Button>\n                        <Grid container justify=\"flex-end\">\n                            <Grid item>\n                                <Link to=\"/signin\">\n                                    Already have an account? Sign in\n              </Link>\n                            </Grid>\n                        </Grid>\n                    </Form>\n                )}\n            </RegisterWrapper>\n        </React.Fragment >\n    )\n}\n\nexport default Signup","import { makeVar } from \"@apollo/client\";\n\nexport interface User {\n    isAuth: boolean,\n    firstName?:  string,\n    lastName?:  string,\n    name?:  string,\n    email?:  string\n}\n\nconst authInitialState: User = {\n    isAuth: false\n}\n\nexport const userVar = makeVar<User>(\n    authInitialState\n);","import React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { Link } from 'react-router-dom';\nimport Grid from '@material-ui/core/Grid';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Form, Field } from \"formik\"\nimport { LoginWrapper } from \"@init/controller\"\nimport { FormikField } from './shared/TexFieldFormik';\nimport { userVar } from 'src/utils/apollo/user';\n\nconst useStyles = makeStyles((theme) => ({\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n}));\n\nconst Singin = () => {\n    const classes = useStyles();\n\n    const setIsAuth = (result: boolean) => {\n        userVar({ isAuth: result });\n    }\n    return (\n        <React.Fragment>\n            <Avatar className={classes.avatar}>\n                <LockOutlinedIcon />\n            </Avatar>\n            <Typography component=\"h1\" variant=\"h5\">\n                Sign in\n            </Typography>\n            <LoginWrapper callback={(result: boolean) => setIsAuth(result)}>\n                {({ errors, touched, mutationError }) => (\n                    <Form className={classes.form}>\n                        <FormikField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            id=\"email\"\n                            label=\"Email Address\"\n                            name=\"email\"\n                            autoComplete=\"email\"\n                            autoFocus\n                        />\n                        <FormikField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            name=\"password\"\n                            label=\"Password\"\n                            type=\"password\"\n                            id=\"password\"\n                            autoComplete=\"current-password\"\n                        />\n                        <Typography color=\"error\">{mutationError?.message}</Typography>\n                        <Field name=\"rememberme\" component={CustomSelect} />\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            component=\"button\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.submit}\n                        >\n                            Sign In\n                    </Button>\n                        <Grid container>\n                            <Grid item xs>\n                                <Link to=\"/forgot\" >\n                                    {\"Forgot password?\"}\n                                </Link>\n                            </Grid>\n                            <Grid item>\n                                <Link to=\"/signup\">\n                                    {\"Don't have an account? Sign Up\"}\n                                </Link>\n                            </Grid>\n                        </Grid>\n                    </Form>\n                )}\n            </LoginWrapper>\n        </React.Fragment >\n    )\n}\n\nexport default Singin\n\nconst CustomSelect = (props: any) => (\n    <FormControlLabel\n        control={<Checkbox\n            {...props}\n            onChange={(e) => props.field.onChange(e)}\n            checked={props.field.value}\n            name=\"rememberme\"\n            value=\"remember\"\n            color=\"primary\"\n        />}\n        label=\"Remember me\"\n    />\n)","import * as React from 'react'\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\nimport { ForgotPasswordWrapper } from \"@init/controller\"\nimport { Form } from 'formik';\nimport { FormikField } from \"./shared/TexFieldFormik\"\n\nconst useStyles = makeStyles((theme) => ({\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n}));\n\nconst ForgotPassword = () => {\n    const classes = useStyles();\n    return (\n        <React.Fragment>\n            <Avatar className={classes.avatar}>\n                <LockOutlinedIcon />\n            </Avatar>\n            <Typography component=\"h1\" variant=\"h5\">\n                Forgot password?\n        </Typography>\n            <ForgotPasswordWrapper>\n                {() => (\n                    <Form className={classes.form}>\n                        <Grid container spacing={2}>\n                            <Grid item xs={12}>\n                                <FormikField variant=\"outlined\"\n                                    required\n                                    fullWidth\n                                    id=\"email\"\n                                    label=\"Email Address\"\n                                    name=\"email\"\n                                    autoComplete=\"email\"\n                                />\n                            </Grid>\n                        </Grid>\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            component=\"button\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.submit}>\n                            Submit\n                        </Button>\n                    </Form>\n                )}\n            </ForgotPasswordWrapper>\n        </React.Fragment >\n    )\n}\n\nexport default ForgotPassword","import * as React from 'react'\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography, Backdrop, CircularProgress, Snackbar } from '@material-ui/core';\nimport { ChangePasswordWrapper } from \"@init/controller\"\nimport { Form } from 'formik';\nimport { FormikField } from \"./shared/TexFieldFormik\"\nimport { withRouter, RouteComponentProps, Redirect } from 'react-router-dom';\nimport Alert from '@material-ui/lab/Alert';\n\nconst useStyles = makeStyles((theme) => ({\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n}));\n\ntype TParams = { token: string }\n\nconst ChangePassword = ({ match }: RouteComponentProps<TParams>) => {\n    const classes = useStyles();\n    const [changeResult, setChangeResult] = React.useState<any>(null);\n    if (changeResult.data) {\n        setTimeout(() => {\n            return (\n                <Redirect to=\"signin\" />\n            )\n        }, 2100);\n    }\n    return (\n        <React.Fragment>\n            <Backdrop open={changeResult.loading}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n            <Snackbar open={changeResult.data} autoHideDuration={2000}>\n                <Alert severity=\"success\">\n                    Password changed successfully.\n                </Alert>\n            </Snackbar>\n            <Avatar className={classes.avatar}>\n                <LockOutlinedIcon />\n            </Avatar>\n            <Typography component=\"h1\" variant=\"h5\">\n                Change password\n        </Typography>\n            <ChangePasswordWrapper token={match.params.token} mutationResult={setChangeResult}>\n                {({ submitData }) => (\n                    <Form className={classes.form}>\n                        <Grid container spacing={2}>\n                            <Grid item xs={12}>\n                                <FormikField\n                                    variant=\"outlined\"\n                                    required\n                                    fullWidth\n                                    name=\"password\"\n                                    label=\"Password\"\n                                    type=\"password\"\n                                    id=\"password\"\n                                    autoComplete=\"current-password\"\n                                />\n                            </Grid>\n                        </Grid>\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            component=\"button\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.submit}>\n                            Submit\n                        </Button>\n                    </Form>\n                )}\n            </ChangePasswordWrapper>\n        </React.Fragment >\n    )\n}\n\nexport default withRouter(ChangePassword)\n\n","import React from 'react'\nimport { Typography } from '@material-ui/core'\nimport { Link } from 'react-router-dom'\n\nconst ConfirmedUserMessage = () => {\n    return (\n        <React.Fragment>\n            <Typography>Your account is now confirmed. Now you can access your account </Typography>\n            <Link to=\"/signin\">Login</Link>\n        </React.Fragment>\n    )\n}\n\nexport default ConfirmedUserMessage\n","import React from 'react'\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport { CONFIRM } from \"@init/controller\"\nimport { useMutation } from '@apollo/client';\nimport ConfirmedUserMessage from './confirmUser/ConfirmedUserMessage';\nimport { Backdrop, CircularProgress } from '@material-ui/core';\n\ntype TParams = { token: string }\n\nconst ConfirmUser = ({ match }: RouteComponentProps<TParams>) => {\n    const [confirmUser, data] = useMutation(CONFIRM);\n    if (!data.called) {\n        confirmUser({ variables: { token: match.params.token } })\n    }\n    if (data.data?.confirmUser) {\n        return <ConfirmedUserMessage />\n    }\n    else return (\n        <Backdrop open>\n            <CircularProgress />\n        </Backdrop>\n    );\n\n}\n\nexport default withRouter(ConfirmUser)","import React from 'react'\nimport { Grid, CssBaseline, Paper, makeStyles } from '@material-ui/core'\nimport { Route } from 'react-router-dom';\nimport Signup from './auth/Signup';\nimport Singin from './auth/Singin';\nimport ForgotPassword from './auth/ForgotPassword';\nimport ChangePassword from './auth/ChangePassword';\nimport ConfirmUser from './auth/ConfirmUser';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        height: '100vh',\n    },\n    image: {\n        backgroundImage: 'url(https://source.unsplash.com/random)',\n        backgroundRepeat: 'no-repeat',\n        backgroundColor:\n            theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n    },\n    paper: {\n        margin: theme.spacing(8, 4),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n}))\n\nconst Auth = () => {\n    const classes = useStyles();\n    return (\n        <Grid container component=\"main\" className={classes.root}>\n            <CssBaseline />\n            <Grid item xs={false} sm={4} md={7} className={classes.image} />\n            <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n                <div className={classes.paper}>\n                    <Route path=\"/signup\">\n                        <Signup />\n                    </Route>\n                    <Route path=\"/signin\">\n                        <Singin />\n                    </Route>\n                    <Route path=\"/forgot\">\n                        <ForgotPassword />\n                    </Route>\n                    <Route path=\"/user/change-password/:token\">\n                        <ChangePassword />\n                    </Route>\n                    <Route path=\"/user/confirm/:token\">\n                        <ConfirmUser />\n                    </Route>\n                </div>\n            </Grid>\n        </Grid >\n    )\n}\n\nexport default Auth\n","import { useMutation } from '@apollo/client'\nimport { LOGOUT } from '@init/controller'\n\ninterface Props {\n    children(props: any): JSX.Element;\n    callback: () => void\n}\n\nconst LogoutButton = (props: Props) => {\n    const [logout, { data }] = useMutation(LOGOUT);\n    if (data?.logout) {\n        props.callback();\n    }\n    return (\n        props.children({ logout: logout, logoutState: data })\n    )\n}\n\nexport default LogoutButton\n","import React, { Fragment } from 'react'\nimport { makeStyles, Avatar, Typography, Grid, TextField, Button } from '@material-ui/core'\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport LogoutButton from './shared/LogoutButton';\nimport { useQuery } from '@apollo/client';\nimport { USERDATA } from '@init/controller';\nimport { User, userVar } from 'src/utils/apollo/user';\ninterface Props {\n\n}\n\nconst useStyles = makeStyles((theme) => ({\n    avatar: {\n        margin: theme.spacing(2),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: \"96%\",\n        margin: \"10px\"\n    },\n    button: {\n        width: \"100%\"\n    }\n}));\n\nconst UserInfo = (props: Props) => {\n    const classes = useStyles();\n    const { data } = useQuery(USERDATA);\n    const user: User = data?.me || {};\n    return (\n        <Fragment>\n            <Avatar className={classes.avatar}>\n                <AccountCircleIcon />\n            </Avatar>\n            <Typography component=\"h1\" variant=\"h5\">\n                Account\n            </Typography>\n            <Grid container spacing={2} className={classes.form}>\n                <Grid item xs={12} sm={6}>\n                    <TextField\n                        variant=\"outlined\"\n                        disabled\n                        label=\"First Name\"\n                        size=\"small\"\n                        style={{ width: \"100%\" }}\n                        value={user.firstName}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <TextField\n                        variant=\"outlined\"\n                        disabled\n                        label=\"Second Name\"\n                        size=\"small\"\n                        style={{ width: \"100%\" }}\n                        value={user.lastName}\n                    />\n                </Grid>\n                <Grid item xs={12} >\n                    <TextField\n                        variant=\"outlined\"\n                        disabled\n                        label=\"Email\"\n                        style={{ width: \"100%\" }}\n                        size=\"small\"\n                        value={user.email}\n                    />\n                </Grid>\n                <Grid item sm={6} xs={12}>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        size=\"medium\"\n                        className={classes.button}\n                        disabled\n                    >Edit</Button>\n                </Grid>\n                <Grid item sm={6} xs={12}>\n                    <LogoutButton callback={() => userVar({ isAuth: false })}>\n                        {({ logout }) => (\n                            <Button\n                                variant=\"contained\"\n                                color=\"secondary\"\n                                size=\"medium\"\n                                className={classes.button}\n                                onClick={logout}\n                            >Logout</Button>)}\n                    </LogoutButton>\n                </Grid>\n            </Grid>\n        </Fragment>\n    )\n}\n\nexport default UserInfo\n","import React from 'react'\nimport { makeStyles, Paper } from '@material-ui/core'\n\ninterface Props {\n    children(props: any): JSX.Element;\n    width?: string;\n    height?: string;\n    match?: boolean;\n}\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        position: \"absolute\",\n        left: \"50%\",\n        top: \"50%\",\n        transform: \"translate(-50%, -50%)\",\n        display: \"flex\",\n        flexDirection: 'column',\n        alignItems: 'center',\n        padding: theme.spacing(2)\n    }\n}))\n\n/*\n* props.match -> media query min-width: 600px\n*/\n\nconst Card = (props: Props) => {\n    const classes = useStyles();\n    return (\n        <Paper\n            className={classes.paper}\n            elevation={4}\n            style={{\n                width: (props.width || (props.match ? \"100vw\" : \"36vw\")),\n                height: (props.width || (props.match ? \"100vh\" : \"auto\"))\n            }}>\n            {\n                props.children({ match: props.match })\n            }\n        </Paper >\n    )\n}\n\nexport default Card\n","import { gql } from \"@apollo/client\";\n\nexport const USER = gql`\nquery getUser {\n    user @client{\n        isAuth\n    }\n}\n`","import React from 'react'\nimport { Route, Redirect } from 'react-router-dom'\nimport { useQuery } from '@apollo/client'\nimport { USER } from 'src/utils/apollo/queries'\nimport { User } from 'src/utils/apollo/user'\n\ninterface Props {\n    children: JSX.Element;\n    path: string;\n}\n\n/*\n*   Usage is with the children aproach:\n*   <ProtectedRoute path=\"/path\">\n*       <Children />\n*   </ProtectedRoute>\n*     \n*/\n\nconst ProtectedRoute = (props: Props) => {\n    const { data } = useQuery(USER);\n    const user: User = data.user;\n    if (user.isAuth) {\n        return (\n            <Route path={props.path}>\n                {props.children}\n            </Route>\n        )\n    } else {\n        return <Redirect to=\"/signin\" />\n    }\n}\n\nexport default ProtectedRoute\n","import React from 'react'\nimport { makeStyles, useMediaQuery } from '@material-ui/core'\nimport UserInfo from './account/UserInfo';\nimport Card from './account/shared/Card';\nimport ProtectedRoute from '../shared/ProtectedRoute';\n\ninterface Props {\n\n}\n\nconst useStyles = makeStyles((theme) => ({\n    image: {\n        backgroundImage: 'url(https://source.unsplash.com/random)',\n        backgroundRepeat: 'no-repeat',\n        backgroundColor:\n            theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        width: \"100vw\",\n        height: \"100vh\",\n        position: \"absolute\",\n        top: 0,\n        left: 0\n    }\n}))\n\nconst Account = (props: Props) => {\n    const classes = useStyles();\n    const matches = useMediaQuery('(min-width: 600px)');\n    return (\n        <React.Fragment>\n            {matches && <div className={classes.image} />}\n            <ProtectedRoute path=\"/account\">\n                <Card match={!matches}>\n                    {() => (<UserInfo />)}\n                </Card>\n            </ProtectedRoute>\n        </React.Fragment>\n    )\n}\n\nexport default Account\n","import React from 'react'\nimport { Route, BrowserRouter, Switch, Redirect } from 'react-router-dom'\nimport Auth from './user/Auth'\nimport Account from './user/Account'\nimport { useQuery } from '@apollo/client'\nimport { USER } from 'src/utils/apollo/queries'\nimport { User } from 'src/utils/apollo/user'\n\nconst Router = () => {\n    const { data } = useQuery(USER);\n    const user: User = data.user;\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route path={[\"/signup\", \"/signin\", \"/forgot\", \"/user/change-password\", \"/user/confirm\"]}>\n                    {user.isAuth ? <Redirect to=\"/account\" /> :\n                        <Auth />\n                    }\n                </Route>\n                <Route path=\"/\">\n                    <Account />\n                </Route>\n            </Switch>\n        </BrowserRouter>\n    )\n}\n\nexport default Router\n","import { InMemoryCache } from \"@apollo/client\";\nimport { userVar } from \"./user\";\n\nexport const cache: InMemoryCache = new InMemoryCache({\n    typePolicies: {\n        Query: {\n            fields: {\n                user: {\n                    read() {\n                        return userVar();\n                    }\n                }\n            }\n        }\n    }\n});\n\n","import { ApolloClient } from '@apollo/client';\nimport { cache } from './cache';\n\nexport const apolloClient = new ApolloClient({\n  uri: 'http://localhost:4000/graphql',\n  cache\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Router from './modules/Router';\nimport { ApolloProvider } from '@apollo/client';\nimport { apolloClient } from './utils';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={apolloClient}>\n      <Router />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./yupSchemas\"), exports);\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}